{"version":3,"sources":["webpack:///./src/Fields.js","webpack:///./src/Store.js","webpack:///./src/index.js"],"names":["__webpack_require__","d","__webpack_exports__","InputField","CheckBox","__WEBPACK_IMPORTED_MODULE_0_react__","n","Error","formStore","__WEBPACK_IMPORTED_MODULE_0_mobx_state_tree__","__WEBPACK_IMPORTED_MODULE_1_lodash__","fieldStore","types","model","id","optional","string","value","union","boolean","type","required","actions","self","addType","handleValue","newValue","fields","map","sending","addListeners","Array","from","keys","key","element","document","getElementById","get","addEventListener","e","target","views","getFieldValue","values","obj","keyValue","Values","searchObj","query","result","console","log","generateStore","props","isArray","children","noop","store","Form","observer","_classCallCheck","this","_this","_possibleConstructorReturn","_Component","call","create","_inherits","prototype","componentDidMount","handleSubmit","_props","_props$validation","validation","undefined","_props$onSubmit","onSubmit","preventDefault","render","_this2","_props2","formName","__WEBPACK_IMPORTED_MODULE_0_react___default","a","createElement","className","Component"],"mappings":"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","file":"app.0720ea7b.js","sourcesContent":["import React, { Component } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nconst getLabelInfo = (required, info) => {\n  if (required) {\n    return info || \"required\";\n  } else if (info) {\n    return info;\n  } else {\n    return \"\";\n  }\n};\n\n\nconst InputField = props => {\n  const {\n    label = \"\",\n    id = \"\",\n    placeholder = \"\",\n    required = false,\n    helperText=\"\"\n  } = props;\n  return (\n    <TextField\n      id={id}\n      helperText={getLabelInfo(required, helperText)}\n      placeholder={placeholder}\n      label={label}\n      margin=\"normal\"\n      type=\"textinput\"\n    />\n  );\n};\n\n\nconst CheckBox = props => {\n  const {\n    label = \"\",\n    id = \"\",\n    required = false  \n  } = props;\n  return (\n    <FormControlLabel\n      control={\n        <Checkbox\n          label={label}\n          id={id}\n          type=\"checkbox\"\n        />\n      }\n      label=\"Primary\"\n    />\n  )\n}\n\n\n\nexport { InputField, CheckBox };\n\n\n// WEBPACK FOOTER //\n// ./src/Fields.js","/* Copyright (C) 2018 TeselaGen Biotechnology, Inc. */\nimport { types, flow } from \"mobx-state-tree\";\nimport { size } from \"lodash\";\n\nconst fieldStore = types\n  .model(\"fieldStore\", {\n    id: types.optional(types.string, \"\"),\n    value: types.optional(types.union(types.string, types.boolean), false),\n    type: types.optional(types.string, \"\"),\n    required: types.optional(types.boolean, false)\n  })\n  .actions(self => ({\n    addType(type) {\n      if (type !== 'checkbox') {\n        self.value = \"\"\n      }\n      self.type = type\n    },\n    handleValue(newValue) {\n      if (self.type === \"checkbox\") {\n        self.value = !self.value;\n      } else {\n        self.value = newValue;\n      }\n    }\n  }));\n\nexport const formStore = types\n  .model(\"formStore\", {\n    fields: types.optional(types.map(fieldStore), {}),\n    sending: types.optional(types.boolean, false)\n  })\n  .actions(self => ({\n    addListeners() {\n      let keys = Array.from(self.fields.keys());\n      keys.map(key => {\n        let element = document.getElementById(key)\n        self.fields.get(key).addType(element.type);\n        element.addEventListener(\"change\", function (e) {\n          self.fields.get(key).handleValue(e.target.value);\n        });\n      });\n    }\n  }))\n  .views(self => ({\n    getFieldValue(key) {\n      return self.fields.get(key).value\n    },\n    values() {\n      let keys = Array.from(self.fields.keys());\n      let obj = {};\n      keys.map(key => obj[key] = self.fields.get(key).value);\n      return ({\n        values: keys.map(key => self.fields.get(key).value),\n        keyValue: obj\n      })\n    },\n    get Values() {\n      let keys = Array.from(self.fields.keys());\n      let obj = {};\n      keys.map(key => obj[key] = self.fields.get(key).value);\n      return ({\n        values: keys.map(key => self.fields.get(key).value),\n        keyValue: obj\n      })\n    }\n  }));\n\n\n// WEBPACK FOOTER //\n// ./src/Store.js","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { formStore } from \"./Store\";\nimport { InputField, CheckBox } from \"./Fields\";\nimport { get, size } from \"lodash\";\n\nconst searchObj = (obj, query) => {\n  let result;\n  for (let key in obj) {\n    let value = obj[key];\n    if (key === \"props\") {\n      return searchObj(value, query);\n    }\n    if (key === query && value !== \"submit\") {\n      console.log(key, value, query)\n      return (result = value);\n    }\n  }\n  return result;\n};\n\nconst generateStore = props => {\n  let fields = {};\n  if (Array.isArray(props.children)) {\n    props.children.map(children => {\n      let id = searchObj(children, \"id\");\n      if (id) {\n        return (fields[id] = {\n          id: id,\n          required: searchObj(children, \"required\")\n        });\n      }\n    });\n  } else {\n    let id = searchObj(props.children, \"id\");\n    fields[id] = {\n      id: id,\n      required: searchObj(props.children, \"required\") || false\n    };\n  }\n  return fields;\n};\n\nconst noop = () => { }\n\nlet store, values, getFieldValue\n\nconst Form = observer(\n  class Form extends Component {\n    constructor(props) {\n      super(props)\n      let fields = generateStore(props);\n      store = formStore.create({ fields })\n      values = store.values;\n      getFieldValue = store.getFieldValue\n    }\n\n\n    componentDidMount() {\n      store.addListeners();\n    }\n\n    handleSubmit(e) {\n      const { validation = noop, onSubmit = noop } = this.props;\n      e.preventDefault();\n      if (validation(store.Values.keyValue)) {\n        onSubmit(store.Values);\n      }\n    }\n    render() {\n      const { children, formName } = this.props;\n      return (\n        <form className={'form-container'} onSubmit={(e) => this.handleSubmit(e)}>\n          {children}\n        </form>\n      );\n    }\n  }\n);\n\n\nexport { Form, InputField, CheckBox, values, getFieldValue };\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}